@page "{id?}"
@model ApiForTest.Pages.Receipts.newReceiptsModel
@{
}
<!DOCTYPE html>
<html>
<head>
    <title>Ресурсы</title>
    <link rel="stylesheet" href="/css/site.css" />
</head>
<body>
    <div class="navigation">
        <h1><a class="aLinkMain" href="/">Склад</a></h1>

        <div class="btn-group">
            <a class="aLink btn" href="/Receipts/Receipts">Поступления</a>
        </div>

        <h1>Справочники</h1>

        <div class="btn-group">
            <a class="aLink btn" href="/Unit/Unit">Еденицы измерения</a>
            <a class="aLink btn" href="/Resource/Resource">Ресурсы</a>
        </div>
    </div>
    <div class="main">
        <h1 style="color: black;">Новое поступление</h1>


        <button id="saveBtn" onclick="addReceipts()">Сохранить</button>
        <button id="deleteBtn" onclick="deleteReceipts()">Удалить</button>
        <div class="newReceiptsDoc">
            <div>
                <p>Номер</p>
                <input id="nwNumber" type="text" style="height: 20px; margin-left: 190px" />
            </div>
            <div>
                <p>Дата (Пример: 2025-08-14)</p>
                <input id="nwData" type="text" style="height: 20px; margin-left: 20px"/>
            </div>
        </div>
        <div class="newCategory">
            <div>
                <button class="openBtn" id="addCategory" onclick="openCategory()">+</button>
            </div>
            <div class="categoryR" style="visibility: hidden;">
                <label for="category" style="font-size: 16px; color: black;">Ресурс</label>
                <select id="newCategoryResource" name="category">
                    <option value="Все">Все</option>
                </select>
            </div>
            <div class="categoryU" style="visibility: hidden;">
                <label for="category" style="font-size: 16px; color: black;">Еденица поступления</label>
                <select id="newCategoryUnit" name="category">
                    <option value="Все">Все</option>
                </select>
            </div>
            <div class="categoryC" style="visibility: hidden;">
                <label for="category" style="font-size: 16px; color: black;">Количество</label>
                <input id="newCount" type="text" />
            </div>
            <div class="closedBtn" style="visibility: hidden;">
                <button id="deleteCategory" onclick="closedCategory()">-</button>
            </div>
        </div>
        <div class="table">
            <table id="table">
                <thead>
                    <tr>
                        <th style="width: 30px;"><button id="addItems" onclick="add()" style="width: 30px; height: 30px;">+</button></th>
                        <th style="width: 400px;">Ресурс</th>
                        <th style="width: 400px;">Еденица измерения</th>
                        <th style="width: 400px;">Количество</th>
                    </tr>
                </thead>
                <tbody>

                </tbody>
            </table>
        </div>
    </div>
    <script>
        function del (button){
            const row = button.closest("tr");
            row.remove();
        }
        function add(){
            console.log("add");
            getItem();
            const tbody = document.querySelector("#table tbody");
            const tr = document.createElement('tr');
            tr.innerHTML = `
                <td style="width: 30px;"><button id="deleteNew" onclick="del(this)" style="width: 30px; height: 30px;">x</button></td>
                <td><select class="nwResource"><option value="Все">Все</option></select></td>
                <td><select class="nwUnit"><option value="Все">Все</option></select></td>
                <td><input class="nwCount" value="0"/></td>
            `;
            tbody.appendChild(tr);
        }
    </script>
    <script>
        async function addReceipts() {
            console.log("Добавление");
            const id = @Model.Id;

            if (id !== 0) {
                //                                              Ресурсы
                const itemResource = document.querySelectorAll('.nwResource');
                const responseResource = await fetch("/api/Resource");
                const dataResource = await responseResource.json();

                const needItemR = Array.from(itemResource).map(item => {
                    const resource = dataResource.find(r => r.name === item.value) || { id: 0 };
                    return resource;
                });

                //                                              Юниты
                const itemUnit = document.querySelectorAll('.nwUnit');
                const responseUnit = await fetch("/api/Unit");
                const dataUnit = await responseUnit.json();

                const needItemU = Array.from(itemUnit).map(item => {
                    const unit = dataUnit.find(u => u.name === item.value) || { id: 0 };
                    return unit;
                });

                //                                              Количество
                const itemCount = document.querySelectorAll('.nwCount');
                const count = Array.from(itemCount).map(item => {
                    return item.value;
                });

                const responseGetData = await fetch(`/api/ReceiptsResource/GetID/${id}`);
                const getData = await responseGetData.json();
               
                //                                              Сборка
                const resultRequest = needItemR.map((itemR, index) => {
                    const id = getData.id;
                    const docID = getData.receiptsDocId;
                    const itemU = needItemU[index];
                    const itemC = count[index];

                    return {
                        id: id,
                        receiptsDocId: docID,
                        resourceID: itemR.id,
                        unitID: itemU.id,
                        count: itemC
                    };
                });

                const response = await fetch(`/api/ReceiptsResource/${id}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(resultRequest)
                });
                if (!response.ok) {
                    alert("Что то не так");
                    return;
                }
                //window.location.href = '/Receipts/Receipts';
            }
            else {
                const selectNum = document.querySelector("#nwNumber");
                const selectDate = document.querySelector("#nwData");
                if (selectNum.value !== "" && selectDate.value !== "") {
                    const response = await fetch("/api/ReceiptsDoc", {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ number: selectNum.value, date: selectDate.value })
                    })

                    const result = await response.json();
                    const dopResponse = await fetch("/api/ReceiptsResource", {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ ReceiptsDocId: result.id, count: 0 })
                    });

                    if (!response.ok || !dopResponse.ok) {
                        alert("не получилось");
                        return;
                    }
                    window.location.href = '/Receipts/Receipts';
                }
                else {
                    alert("Незаполнены обязательные поля");
                }
            }
        }
    </script>
    <script>
        async function deleteReceipts(){
            const response = await fetch(`/api/ReceiptsResource/${@Model.Id}`, {
                method: 'DELETE'
            });
            if(!response.ok){
                alert("Ошибка");
                return;
            }
            window.location.href = '/Receipts/Receipts';
        }
    </script>
    <script>
        async function getData() {
            console.log("getData");
            const id = @Model.Id;
            if(id !== 0){
                const response = await fetch(`/api/ReceiptsResource/${id}`);
                const data = await response.json();
                add();
                await getItem();
                data.forEach(item => {
                    document.querySelector("#nwNumber").value = item.numberRDoc;
                    document.querySelector("#nwData").value = item.dateRDoc;

                    document.querySelector(".nwResource").value = item.nameResource;
                    document.querySelector(".nwUnit").value = item.nameUnit;
                    document.querySelector(".nwCount").value = item.countRResource;
                });
            }
            else{
                document.querySelector('#deleteBtn').style.display = 'none';
            }
        }
        getData();
    </script>
    <script>
        function openCategory() {
            getItem();

            const categoryR = document.querySelector('.categoryR');
            categoryR.style.visibility = 'visible';

            const categoryU = document.querySelector('.categoryU');
            categoryU.style.visibility = 'visible';

            const categoryC = document.querySelector('.categoryC');
            categoryC.style.visibility = 'visible';

            const btnClosed = document.querySelector('.closedBtn');
            btnClosed.style.visibility = 'visible';
        }
    </script>
    <script>
        function closedCategory() {
            const categoryR = document.querySelector('.categoryR');
            categoryR.style.visibility = 'hidden';

            const categoryU = document.querySelector('.categoryU');
            categoryU.style.visibility = 'hidden';

            const categoryC = document.querySelector('.categoryC');
            categoryC.style.visibility = 'hidden';

            const btnClosed = document.querySelector('.closedBtn');
            btnClosed.style.visibility = 'hidden';
        }
    </script>
    <script>
        async function getItem(){
            console.log("getItem");
            const responseR = await fetch("/api/Resource");
            const dataR = await responseR.json();
            const selectorsR = document.querySelectorAll(".nwResource");

            selectorsR.forEach(selectorR => {
                dataR.forEach(itemR => {
                    resource = Array.from(selectorR.options)
                        .some(option => option.textContent === itemR.name);

                    if (!resource) {
                        const rowR = document.createElement('option');
                        rowR.textContent = itemR.name;
                        selectorR.appendChild(rowR);
                    }
                });
            });

            const responseU = await fetch("/api/Unit");
            const dataU = await responseU.json();
            const selectorsU = document.querySelectorAll(".nwUnit");

            selectorsU.forEach(selectorU => {
                dataU.forEach(itemU => {
                    const unit = Array.from(selectorU.options)
                        .some(option => option.textContent === itemU.name);

                    if (!unit) {
                        const rowU = document.createElement('option');
                        rowU.textContent = itemU.name;
                        selectorU.appendChild(rowU);
                    }
                });
            });
        }
    </script>
</body>
</html>
























@*         <script>
            document.getElementById('saveBtn').addEventListener('click', async () => {
                const value = document.getElementById('nwItem').value.trim();

                if (!value) {
                    alert('Введите значение');
                    return;
                }

                const response = await fetch("/api/Resource", {
                    method: 'Post',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ name: value })
                });

                if (!response.ok) {
                    throw new Error('Ошибка при отправке данных');
                }

                window.location.href = '/Resource/Resource';
            });
        </script> *@
